# Generated by Class::Inline version 0.0.1
# Date: Mon Oct  3 17:29:06 2022
use strict;
use warnings;


package OptArgs2::SubCmd;BEGIN {require OptArgs2::CmdBase;our@ISA=('OptArgs2::CmdBase')};our$_HAS;sub OptArgs2::SubCmd_CI::import {shift;$_HAS={@_ > 1 ? @_ : %{$_[0]}};$_HAS=$_HAS->{'has'}if exists$_HAS->{'has'}}our%_ATTRS;my%_BUILD_CHECK;sub new {my$class=shift;my$self={@_ ? @_ > 1 ? @_ : %{$_[0]}: ()};%_ATTRS=map {($_=>1)}keys %$self;bless$self,ref$class || $class;$_BUILD_CHECK{$class}//= do {my@possible=($class);my@BUILD;my@CHECK;while (@possible){no strict 'refs';my$c=shift@possible;push@BUILD,$c .'::BUILD' if exists &{$c .'::BUILD'};push@CHECK,$c .'::__CHECK' if exists &{$c .'::__CHECK'};push@possible,@{$c .'::ISA'}}[reverse(@CHECK),reverse(@BUILD)]};map {$self->$_}@{$_BUILD_CHECK{$class}};Carp::carp("OptArgs2::SubCmd attribute '$_' unexpected")for keys%_ATTRS;$self}sub __RO {my (undef,undef,undef,$sub)=caller(1);Carp::croak("attribute $sub is read-only")}sub __CHECK {map {delete $_[0]->{$_}}'name';if (my@missing=grep {not exists $_[0]->{$_}}'parent'){Carp::croak('OptArgs2::SubCmd attribute(s) required: ' .join(', ',@missing))}no strict 'refs';my$_attrs=*{ref($_[0]).'::_ATTRS'};map {delete$_attrs->{$_}}keys %$_HAS}sub name {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'name'}//= $_HAS->{'name'}->{'default'}->($_[0])}sub parent {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'parent'}}BEGIN {$INC{'OptArgs2/SubCmd.pm'}=__FILE__}
1;
