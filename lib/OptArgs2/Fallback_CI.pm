# Generated by Class::Inline version 0.0.1
#<<<                                                             ## CI_PM_FILTER
package OptArgs2::Fallback_CI;                                   ## CI_PM_FILTER
use strict;                                                      ## CI_PM_FILTER
use warnings;                                                    ## CI_PM_FILTER
                                                                 ## CI_PM_FILTER
my ( $pkg, $file, $line ) = caller;                              ## CI_PM_FILTER
my @redo;                                                        ## CI_PM_FILTER
                                                                 ## CI_PM_FILTER
my $CI = '/usr/local/share/perl5/site_perl/5.30/Class/Inline.pm';  ## CI_PM_FILTER
if ( ! -e $CI ) {                                                ## CI_PM_FILTER
    my $pm_filter = '##CI_PM_FILTER' =~ s/##CI/## CI/r;          ## CI_PM_FILTER
    warn "The file '$CI' cannot be found.                        ## CI_PM_FILTER
Possible scenarios:                                              ## CI_PM_FILTER
    1. You are developing $pkg and Class::Inline                 ## CI_PM_FILTER
       is missing (or new). You should ensure Class::Inline      ## CI_PM_FILTER
       is installed correctly and run:                           ## CI_PM_FILTER
                                                                 ## CI_PM_FILTER
       \$ class-inline-init --force $pkg                         ## CI_PM_FILTER
                                                                 ## CI_PM_FILTER
    2. The distribution containing $pkg didn't filter the        ## CI_PM_FILTER
       _CI.pm file during installation. Raise an issue           ## CI_PM_FILTER
       with the distribution owner.                              ## CI_PM_FILTER
                                                                 ## CI_PM_FILTER
" =~ s/\s*$pm_filter//gmr;                                       ## CI_PM_FILTER
}                                                                ## CI_PM_FILTER
elsif ( ( stat $CI )[9] > 1661799531 ) {                         ## CI_PM_FILTER
    push @redo, $CI;                                             ## CI_PM_FILTER
}                                                                ## CI_PM_FILTER
                                                                 ## CI_PM_FILTER
my $file_mtime      = ( stat $file )[9];                         ## CI_PM_FILTER
my $file_want_mtime = 1662541500;                                ## CI_PM_FILTER
push @redo, $file if $file_mtime > $file_want_mtime;             ## CI_PM_FILTER
                                                                 ## CI_PM_FILTER
if ( @redo and not $ENV{CLASS_INLINE_SKIP} ) {                   ## CI_PM_FILTER
    warn "$_ was modified\n" for @redo;                          ## CI_PM_FILTER
    require Class::Inline;                                       ## CI_PM_FILTER
    *import = sub {                                              ## CI_PM_FILTER
        shift;                                                   ## CI_PM_FILTER
        Class::Inline::import_writer(                            ## CI_PM_FILTER
          $pkg, $file, __PACKAGE__, __FILE__, @_ );              ## CI_PM_FILTER
    };                                                           ## CI_PM_FILTER
}                                                                ## CI_PM_FILTER
else {                                                           ## CI_PM_FILTER
    eval join '', <DATA>;                                        ## CI_PM_FILTER
    die $@ if $@;                                                ## CI_PM_FILTER
}                                                                ## CI_PM_FILTER
1;                                                               ## CI_PM_FILTER
#>>>                                                             ## CI_PM_FILTER
__DATA__                                                         ## CI_PM_FILTER
#line 1 "OptArgs2::Fallback_CI"
use strict;use warnings;package OptArgs2::Fallback_CI;our$INLINE;
sub import {$INLINE=exists $_[1]->{'has'}? $_[1]: {has=>$_[1]}}package
OptArgs2::Fallback;BEGIN{$INC{'OptArgs2/Fallback.pm'}=__FILE__}require Carp;
sub new {my$class=shift;my$self={@_ ? @_ > 1 ? @_ : %{$_[0]}: ()};bless$self,
ref$class || $class;my@possible=($class);my@builds;my@checks;while (@possible)
{no strict 'refs';my$c=shift@possible;push@builds,*{$c .'::BUILD'}if exists &{
$c .'::BUILD'};push@checks,*{$c .'::__CHECK'}if exists &{$c .'::__CHECK'};push
@possible,@{$c .'::ISA'}}map {$self->$_}reverse(@checks),reverse(@builds);
$self}
sub __RO {my (undef,undef,undef,$sub)=caller(1);Carp::croak(
"attribute $sub is read-only")}
sub _dump {my$self=shift;my$d=shift // 1;require Data::Dumper;no warnings
'once';local$Data::Dumper::Indent=1;local$Data::Dumper::Maxdepth=$d;local
$Data::Dumper::Sortkeys=1;my$x=Data::Dumper::Dumper($self);$x =~
s/^.*?\n(.*)\n.*?\n/$1/s;Carp::carp($self ."\n".$x ."\n ")}
sub hidden {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'hidden'}}
