# Generated by Class::Inline version 0.0.1
# Date: Tue Sep 27 10:34:54 2022
use strict;
use warnings;

package OptArgs2::OptArgBase_CI;                              ## CI_PM_FILTER
use Class::Inline::Check                                      ## CI_PM_FILTER
  file        => '/home/mark/src/optargs/lib/OptArgs2.pm',    ## CI_PM_FILTER
  strip       => 1,                                           ## CI_PM_FILTER
  tidy        => 0,                                           ## CI_PM_FILTER
  wrap        => 0,                                           ## CI_PM_FILTER
  wrap_indent => 0,                                           ## CI_PM_FILTER
  wrap_maxlen => 78,                                          ## CI_PM_FILTER
  code        => <<'CI_PM_FILTER';                            ## CI_PM_FILTER

package OptArgs2::OptArgBase;our$_HAS;sub OptArgs2::OptArgBase_CI::import {shift;$_HAS={@_ > 1 ? @_ : %{$_[0]}};$_HAS=$_HAS->{'has'}if exists$_HAS->{'has'}}sub __RO {my (undef,undef,undef,$sub)=caller(1);Carp::croak("attribute $sub is read-only")}sub __CHECK {if (my@missing=grep {not exists $_[0]->{$_}}'comment','isa','name'){Carp::croak('OptArgs2::OptArgBase attribute(s) required: ' .join(', ',@missing))}no strict 'refs';my$_attrs=*{ref($_[0]).'::_ATTRS'};map {delete$_attrs->{$_}}keys %$_HAS}sub comment {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'comment'}}sub default {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'default'}}sub getopt {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'getopt'}}sub isa {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'isa'}}sub isa_name {if (@_ > 1){$_[0]{'isa_name'}=$_[1];return $_[0]}$_[0]{'isa_name'}}sub name {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'name'}}sub required {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'required'}}sub show_default {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'show_default'}}BEGIN {$INC{'OptArgs2/OptArgBase.pm'}=__FILE__}
sub _dump { ## CI_PM_FILTER
    my $self = shift; ## CI_PM_FILTER
    my $d = shift // 1; ## CI_PM_FILTER
    require Data::Dumper; ## CI_PM_FILTER
    no warnings 'once'; ## CI_PM_FILTER
    local $Data::Dumper::Indent = 1; ## CI_PM_FILTER
    local $Data::Dumper::Maxdepth = $d; ## CI_PM_FILTER
    local $Data::Dumper::Sortkeys = 1; ## CI_PM_FILTER
    my $x = Data::Dumper::Dumper($self); ## CI_PM_FILTER
    $x =~ s/.*?{/{/; ## CI_PM_FILTER
    $x =~ s/}.*?\n$/}/; ## CI_PM_FILTER
    my $i = 0; ## CI_PM_FILTER
    my @list; ## CI_PM_FILTER
    do { ## CI_PM_FILTER
        @list = caller( $i++ ); ## CI_PM_FILTER
    } until $list[3] eq __PACKAGE__ . '::_dump'; ## CI_PM_FILTER
    warn "$self $x at $list[1]:$list[2]\n"; ## CI_PM_FILTER
} ## CI_PM_FILTER
CI_PM_FILTER
1;
